// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using terraservice.Infrastructure.DataAccess;

#nullable disable

namespace terraservice.Infrastructure.Migrations
{
    [DbContext(typeof(TerraserviceDbContext))]
    [Migration("20250226134341_clientSoftDelite")]
    partial class clientSoftDelite
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("terraservice.Domain.Entities.Clients", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<bool>("IsDelited")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Ensaios.UmidadeHig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Capsula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<int>("PointsPointId")
                        .HasColumnType("int");

                    b.Property<string>("SoloMaisCapsula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SoloSecoMaisCapsula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tara")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PointsPointId");

                    b.ToTable("UmidadeHig");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Ensaios.UmidadeNat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Capsula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<int>("PointsPointId")
                        .HasColumnType("int");

                    b.Property<string>("SoloMaisCapsula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SoloSecoMaisCapsula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tara")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PointsPointId");

                    b.ToTable("UmidadeNat");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Points", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PointId"));

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectsProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("PointId");

                    b.HasIndex("ProjectsProjectId");

                    b.ToTable("Points");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Projects", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ClientsClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProjectId");

                    b.HasIndex("ClientsClientId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Ensaios.UmidadeHig", b =>
                {
                    b.HasOne("terraservice.Domain.Entities.Points", "Points")
                        .WithMany("UmidadesHig")
                        .HasForeignKey("PointsPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Points");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Ensaios.UmidadeNat", b =>
                {
                    b.HasOne("terraservice.Domain.Entities.Points", "Points")
                        .WithMany("UmidadesNat")
                        .HasForeignKey("PointsPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Points");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Points", b =>
                {
                    b.HasOne("terraservice.Domain.Entities.Projects", "Projects")
                        .WithMany("Points")
                        .HasForeignKey("ProjectsProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Projects", b =>
                {
                    b.HasOne("terraservice.Domain.Entities.Clients", "Clients")
                        .WithMany("Projects")
                        .HasForeignKey("ClientsClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Clients", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Points", b =>
                {
                    b.Navigation("UmidadesHig");

                    b.Navigation("UmidadesNat");
                });

            modelBuilder.Entity("terraservice.Domain.Entities.Projects", b =>
                {
                    b.Navigation("Points");
                });
#pragma warning restore 612, 618
        }
    }
}
